---
import type { InferGetStaticPropsType, GetStaticPaths } from "astro";
import { BLOG } from "~/config.mjs";
import merge from "lodash.merge";
import type { ImageMetadata } from "astro";
import Layout from "~/layouts/PageLayout.astro";
import SinglePost from "~/components/blog/SinglePost.astro";
import ToBlogLink from "~/components/blog/ToBlogLink.astro";
import { getCanonical, getPermalink } from "~/utils/permalinks";
import { getStaticPathsBlogPost, blogPostRobots } from "~/utils/blog";
import { findImage } from "~/utils/images";
import { fetchPosts } from "~/utils/blog";
import type { MetaData } from "~/types";

export const prerender = true;

export async function getStaticPaths() {
  if (BLOG?.disabled || BLOG?.post?.disabled) return [];
  return (await fetchPosts()).map((post) => ({
    params: {
      blog: post.permalink,
    },
    props: { post },
  }));
}

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { post } = Astro.props as Props;

const url = getCanonical(getPermalink(post.permalink, "post"));
const image = (await findImage(post.image)) as
  | ImageMetadata
  | string
  | undefined;

const metadata = merge(
  {
    title: post.title,
    description: post.excerpt,
    robots: {
      index: blogPostRobots?.index,
      follow: blogPostRobots?.follow,
    },
    openGraph: {
      type: "article",
      ...(image
        ? {
            images: [
              {
                url: image,
                width: (image as ImageMetadata)?.width,
                height: (image as ImageMetadata)?.height,
              },
            ],
          }
        : {}),
    },
  },
  {
    ...(post?.metadata
      ? { ...post.metadata, canonical: post.metadata?.canonical || url }
      : {}),
  }
) as MetaData;
---

<Layout metadata={metadata}>
  <title>Blog | Omni Security</title>
  <meta name="description" content="The main blog page for Omni Security" />
  <SinglePost post={{ ...post, image: image }} url={url} />
  <ToBlogLink />
</Layout>
